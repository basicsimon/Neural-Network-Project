# -*- coding: utf-8 -*-
"""WNN_AnswersExercise10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aSTFQwpzVyyBIGCrv_Lvp_md68MDegV-

Working with Neural Network Models

Â© Hans Nieminen, Satakunta University of Applied Sciences

# Exercise 10.1
"""

import numpy as np

def convolution(matrix, kernel, stride=1, padding=0):
    # Add padding to the matrix
    if padding > 0:
        matrix = np.pad(matrix,
                        pad_width=padding,
                        mode='constant',
                        constant_values=0)
    n = matrix.shape[0]
    f = kernel.shape[0]
    conv_matrix = []
    # stepping from top to bottom
    for i in range(0,n-f+1,stride):
        # stepping from left to right
        row = []
        for j in range(0,n-f+1,stride):
            sub_matrix = matrix[i:i+f,j:j+f]
            row.append(sub_matrix.flatten().dot(kernel.flatten()))
        conv_matrix.append(row)
    conv_matrix = np.array(conv_matrix)
    return conv_matrix

m = np.array([[0.6,0.2,0.2,-0.2,1.1,0.5],
              [0.2,0.4,0.0,0.6,-0.1,0.8],
              [0.3,0.8,0.2,0.3,1.2,1.5],
              [-0.6,0.8,0.8,-0.7,0.1,0.2] ,
              [0.1,0.1,0.1,0.8,0.9,1.2],
              [0.2,-0.5,0.1,-0.3,0.5,0.2]])
m

kernel1 = np.array([[1.0, 0.0, 0.5],
                    [0.5, 1.0, 0.5],
                    [0.1, 0.8, 0.2]])
kernel2 = np.array([[0.1, 0.5],
                    [0.5, 1.0]])

feature_map1 = convolution(m, kernel1, stride=2, padding=2)
feature_map1

feature_map2 = convolution(feature_map1, kernel2, stride=1, padding=1)
feature_map2

print(f'Mean is {feature_map2.mean().round(2)}')

"""# Exercise 10.2"""

def count_result_n(n, p, f, s):
    return ((n+2*p-f)/s)+1

n = 400  # input size: n X n
f = 10  # filter size: f X f
p = 0   # padding
s = 3   # stride

n = count_result_n(n, p, f, s)
n

f = 5  # filter size: f X f
p = 1   # padding
s = 2   # stride

result_n = count_result_n(n, p, f, s)
result_n

dropout = 0.2
output_size = (result_n**2)*(1-dropout)
output_size
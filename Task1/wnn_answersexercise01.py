# -*- coding: utf-8 -*-
"""WNN_AnswersExercise01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12pcw5gD8oBKRHDjiv04H1Y9gPC9NIooT

Working with Neural Network Models

&copy; Hans Nieminen, Satakunta University of Applied Sciences

# Exercise 1.1
"""

import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer, KNNImputer

data = {"A":[1,4,7,10,np.nan,16,18,20],
        "B":[2,np.nan,10,11,14,17,12,np.nan],
        "C":[6,6,9,12,15,np.nan,12,23],
        "D":[4,4,5,np.nan,5,2,5,2]}
df = pd.DataFrame(data)
df

imputerA = SimpleImputer(missing_values=np.nan, strategy='mean')
imputerB = KNNImputer(n_neighbors=2)
imputerC = KNNImputer(n_neighbors=3)
imputerD = SimpleImputer(missing_values=np.nan, strategy='most_frequent')

df[['B']] = imputerB.fit_transform(df[['B']])
df

df[['C']] = imputerC.fit_transform(df[['C']])
df

df[['A']] = imputerA.fit_transform(df[['A']]).round()
df

df[['D']] = imputerD.fit_transform(df[['D']])
df

round(df.mean(axis=None),3)

"""# Exercise 1.2"""

import numpy as np

def is_vector(array):
    #'b' = boolean, 'u' = unsigned integer, 'i' = signed integer 'f'= float
    return isinstance(array, np.ndarray) and array.ndim == 1 and array.dtype.kind in set('buif')

def distance(vector1, vector2, distance_type='euclidean'):
  if not(is_vector(vector1) and is_vector(vector2)):
    raise TypeError('Parameters are not vectors.')
  if len(vector1) != len(vector2):
    raise ValueError('Vector length is not same.')
  if not(distance_type.lower() in ['euclidean', 'manhattan']):
    raise ValueError("distance_type has to be one the following: 'euclidian', 'manhattan'")

  diff = vector1-vector2
  if distance_type.lower() == 'euclidean':
    #return np.sqrt(np.sum(np.power(vector1-vector2,2)))
    return np.linalg.norm(diff)
  elif distance_type.lower() == 'manhattan':
    return np.sum(np.abs(vector1-vector2))
  else:
    return None

a = np.array([1,2,3])
b = np.array([3,1,5])

print(distance(a,b,'euclidean'))
print(distance(a,b,'manhattan'))

def distance_matrix(matrix, distance_type='euclidean'):
  m = len(matrix)
  distances = np.zeros((m, m))
  for i in range(m):
    for j in range(i, m):
      d = distance(matrix[i], matrix[j], distance_type)
      distances[i, j] = d
      distances[j, i] = d
  return distances

input_matrix = np.array([[1,2,3,5,3],
                         [3,1,5,7,-1],
                         [2,7,1,8,-1],
                         [4,6,1,-2,0],
                         [3,0,-1,2,2],
                         [0,0,0,0,0]])
input_matrix

d1 = distance_matrix(input_matrix, 'euclidean')
d2 = distance_matrix(input_matrix, 'manhattan')

d1

d2

# indexes of the max value in matrix
max_indexes = np.unravel_index(d2.argmax(), d2.shape)
max_indexes

# vectors that have the max distance between each other
print(input_matrix[max_indexes[0]])
print(input_matrix[max_indexes[1]])

print(d2.max().round(2))

"""# Exercise 1.3"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

url = 'https://raw.githubusercontent.com/haniemi/deeplearning/main/data/airbnb.csv'

df = pd.read_csv(url, index_col=0)
df.head()

len(df)

X = df.drop(columns = ['room_type']).copy()
y = df['room_type']

X_train, X_temp, y_train, y_temp = train_test_split(X,
                                                    y,
                                                    test_size=0.25,
                                                    random_state = 125,
                                                    stratify=y)

X_val, X_test, y_val, y_test = train_test_split(X_temp,
                                                y_temp,
                                                test_size=0.8,
                                                random_state = 125,
                                                stratify=y_temp)

print('Entire data', len(y), df['room_type'].value_counts()/len(df))
print()
print('Train data', len(y_train), y_train.value_counts()/len(y_train))
print()
print('Validation data',len(y_val), y_val.value_counts()/len(y_val))
print()
print('Test data', len(y_test), y_test.value_counts()/len(y_test))

y_test.value_counts()['Private room']

y_test.value_counts()